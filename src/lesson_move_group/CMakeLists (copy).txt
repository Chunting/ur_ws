cmake_minimum_required(VERSION 2.8.3)
project(lesson_move_group)
set(CMAKE_CXX_FLAGS "-std=c++0x ${CMAKE_CXX_FLAGS}")

## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages
find_package(catkin REQUIRED COMPONENTS
  roscpp
  moveit_ros_planning_interface
  std_msgs


  tf
  sensor_msgs
  message_generation
)

## System dependencies are found with CMake's conventions
# find_package(Boost REQUIRED COMPONENTS system)


## Uncomment this if the package has a setup.py. This macro ensures
## modules and global scripts declared therein get installed
## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html
# catkin_python_setup()

################################################
## Declare ROS messages, services and actions ##
################################################

## To declare and build messages, services or actions from within this
## package, follow these steps:
## * Let MSG_DEP_SET be the set of packages whose message types you use in
##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).
## * In the file package.xml:
##   * add a build_depend and a run_depend tag for each package in MSG_DEP_SET
##   * If MSG_DEP_SET isn't empty the following dependencies might have been
##     pulled in transitively but can be declared for certainty nonetheless:
##     * add a build_depend tag for "message_generation"
##     * add a run_depend tag for "message_runtime"
## * In this file (CMakeLists.txt):
##   * add "message_generation" and every package in MSG_DEP_SET to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * add "message_runtime" and every package in MSG_DEP_SET to
##     catkin_package(CATKIN_DEPENDS ...)
     catkin_package(CATKIN_DEPENDS message_runtime)
##   * uncomment the add_*_files sections below as needed
##     and list every .msg/.srv/.action file to be processed
##   * uncomment the generate_messages entry below
##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)

## Generate messages in the 'msg' folder
# add_message_files(
#   FILES
#   Message1.msg
#   Message2.msg
# )

## Generate services in the 'srv' folder
# add_service_files(
#   FILES
#   Service1.srv
#   Service2.srv
# )

## Generate actions in the 'action' folder
# add_action_files(
#   FILES
#   Action1.action
#   Action2.action
# )

## Generate added messages and services with any dependencies listed here
# generate_messages(
#   DEPENDENCIES
#   std_msgs  # Or other packages containing msgs
# )


###################################
## catkin specific configuration ##
###################################
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this if you package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(
#  INCLUDE_DIRS include
#  LIBRARIES lesson_move_group
#  CATKIN_DEPENDS moveit_core roscpp
#  DEPENDS system_lib
  CATKIN_DEPENDS message_runtime std_msgs
)

###########
## Build ##
###########

## Specify additional locations of header files
## Your package locations should be listed before other locations
# include_directories(include)
include_directories(
  ${catkin_INCLUDE_DIRS}
  ${TMATH_INCLUDE_DIRS}
)

## Declare a cpp library
# add_library(lesson_move_group
#   src/${PROJECT_NAME}/lesson_move_group.cpp
# )

## Declare a cpp executable
add_executable(lesson_move_group_1 src/lesson_move_group_1.cpp)
add_executable(lesson_move_group_2 src/lesson_move_group_2.cpp)
add_executable(lesson_move_group_3 src/lesson_move_group_3.cpp)
add_executable(lesson_move_group_3_1 src/lesson_move_group_3_1.cpp)
add_executable(lesson_move_group_4 src/lesson_move_group_4.cpp)
add_executable(lesson_move_group_5 src/lesson_move_group_5.cpp)
add_executable(lesson_move_group_6 src/lesson_move_group_6.cpp)
add_executable(lesson_move_group_7 src/lesson_move_group_7.cpp)
add_executable(lesson_move_group_8 src/lesson_move_group_8.cpp)
add_executable(lesson_move_group_9 src/lesson_move_group_9.cpp)
add_executable(lesson_move_group_10 src/lesson_move_group_10.cpp)
add_executable(lesson_move_group_11 src/lesson_move_group_11.cpp)
add_executable(lesson_move_group_12 src/lesson_move_group_12.cpp)
add_executable(send_urscript src/send_urscript.cpp)
add_executable(send_urspeed src/send_urspeed.cpp)
add_executable(talker src/talker.cpp)
add_executable(key_press_talker src/key_press_talker.cpp)
add_executable(joint_states_sub src/joint_states_sub.cpp)
add_executable(joint_states_send src/joint_states_send.cpp)
add_executable(joint_states_rec src/joint_states_rec.cpp)

## Add cmake target dependencies of the executable/library
## as an example, message headers may need to be generated before nodes
# add_dependencies(lesson_move_group_node lesson_move_group_generate_messages_cpp)

## Specify libraries to link a library or executable target against
 target_link_libraries(lesson_move_group_1 ${catkin_LIBRARIES})
 target_link_libraries(lesson_move_group_2 ${catkin_LIBRARIES})
 target_link_libraries(lesson_move_group_3 ${catkin_LIBRARIES})
 target_link_libraries(lesson_move_group_3_1 ${catkin_LIBRARIES})
 target_link_libraries(lesson_move_group_4 ${catkin_LIBRARIES})
 target_link_libraries(lesson_move_group_5 ${catkin_LIBRARIES})
 target_link_libraries(lesson_move_group_6 ${catkin_LIBRARIES})
 target_link_libraries(lesson_move_group_7 ${catkin_LIBRARIES} ${TMATH_LIBRARIES})
 target_link_libraries(lesson_move_group_8 ${catkin_LIBRARIES})
 target_link_libraries(lesson_move_group_9 ${catkin_LIBRARIES} ${TMATH_LIBRARIES})
 target_link_libraries(lesson_move_group_10 ${catkin_LIBRARIES} ${TMATH_LIBRARIES})
 target_link_libraries(lesson_move_group_11 ${catkin_LIBRARIES} ${TMATH_LIBRARIES})
 target_link_libraries(lesson_move_group_12 ${catkin_LIBRARIES} ${TMATH_LIBRARIES})
 target_link_libraries(send_urscript ${catkin_LIBRARIES} ${TMATH_LIBRARIES})
 target_link_libraries(send_urspeed ${catkin_LIBRARIES} ${TMATH_LIBRARIES})
 target_link_libraries(talker ${catkin_LIBRARIES})
 target_link_libraries(key_press_talker ${catkin_LIBRARIES})
 target_link_libraries(joint_states_sub ${catkin_LIBRARIES})
 target_link_libraries(joint_states_send ${catkin_LIBRARIES})
 target_link_libraries(joint_states_rec ${catkin_LIBRARIES})

#############
## Install ##
#############

# all install targets should use catkin DESTINATION variables
# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html

## Mark executable scripts (Python etc.) for installation
## in contrast to setup.py, you can choose the destination
# install(PROGRAMS
#   scripts/my_python_script
#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark executables and/or libraries for installation
# install(TARGETS lesson_move_group lesson_move_group_node
#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark cpp header files for installation
# install(DIRECTORY include/${PROJECT_NAME}/
#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
#   FILES_MATCHING PATTERN "*.h"
#   PATTERN ".svn" EXCLUDE
# )

## Mark other files for installation (e.g. launch and bag files, etc.)
# install(FILES
#   # myfile1
#   # myfile2
#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
# )

#############
## Testing ##
#############

## Add gtest based cpp test target and link libraries
# catkin_add_gtest(${PROJECT_NAME}-test test/test_lesson_move_group.cpp)
# if(TARGET ${PROJECT_NAME}-test)
#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})
# endif()

## Add folders to be run by python nosetests
# catkin_add_nosetests(test)
